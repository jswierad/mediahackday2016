
/* Controltag Loader for Sanoma */
(function(){
  var debugging = /kxdebug/.test(location);
  var log = function() {
    // It's a flag, so if it's there, then it means debug.
    debugging && window.console && console.log([].slice.call(arguments).join(' '));
  };

  var load = function(url, callback) {
    log('Loading script from:', url);
    var node = document.createElement('script');
    node.async = true;  // This is just to be friendly.
    node.src = url;

    // Connect to both in case we're in older IE.
    node.onload = node.onreadystatechange = function() {
      var state = node.readyState;
      if (!callback.done && (!state || /loaded|complete/.test(state))) {
        log('Script loaded from:', url);
        callback.done = true;  // Mark the callback, so we don't load it twice on accident.
        callback();
      }
    };

    // Fetch the first script element, so we can insert the
    // controltag before it. There *must* be at least one
    // script element, or this code would never be called
    var sibling = document.getElementsByTagName('script')[0];
    sibling.parentNode.insertBefore(node, sibling);
  };

  // ControlTag simply crashes when opening a website from Twitter browser on
  // iOS, temporarily disable CT when Twitter for iPhone is detected until they
  // fix this (works fine with other twitter client though)
  if (/Twitter for iPhone/.test(window.navigator.userAgent || '')) return;

  var config = {"partner_segment_map": {}, "context_terms": [], "tags": [{"content": "<script>\r\nwindow.Krux||((Krux=function(){Krux.q.push(arguments);}).q=[]);\r\n(function(){\r\n  function retrieve(n){\r\n    var m, k='kx'+n;\r\n    if (window.localStorage) {\r\n        return window.localStorage[k] || \"\";\r\n    } else if (navigator.cookieEnabled) {\r\n        m = document.cookie.match(k+'=([^;]*)');\r\n        return (m && unescape(m[1])) || \"\";\r\n    } else {\r\n        return '';\r\n    }\r\n  }\r\n  var kvs = [];\r\n  Krux.user = retrieve('user');\r\n  if (Krux.user) {\r\n    kvs.push('u=' + Krux.user);\r\n  }\r\n  Krux.segments = retrieve('segs') && retrieve('segs').split(',') || [];\r\n  for (var i = 0; i < Krux.segments.length; i++ ) {\r\n    kvs.push('ksgmnt=' + Krux.segments[i]);\r\n  }\r\n  Krux.dartKeyValues = kvs.length ? kvs.join(';') + ';': '';\r\n  if (window.wlrcmd && Krux.dartKeyValues) { \r\n    window.wlrcmd = window.wlrcmd + ';' + Krux.dartKeyValues; \r\n  }\r\n})();\r\n</script>", "target": "", "target_action": null, "require": "", "docwrite": null, "template_replacement": 1, "execution_results": {"onloadSafe": true, "docwrite": false, "listeners": []}, "tier": 1, "internal": false, "content_type": "html", "timing": "asap", "method": "document", "type": "publisher", "id": 10562, "name": "Krux kxinterchange snippet (custom)"}, {"content": "<script type=\"text/javascript\"> \r\n  Krux('set', {\r\n    section: window.tagging && tagging.zone\r\n  });\r\n</script>", "target": "", "target_action": null, "require": "", "docwrite": null, "template_replacement": 1, "execution_results": null, "tier": 1, "internal": 1, "content_type": "html", "timing": "asap", "method": "document", "type": "publisher", "id": 10423, "name": "Sanoma pull info from page"}, {"content": "<script>\r\n// this tag is intentionally blank\r\n</script>", "target": null, "target_action": "append", "require": "", "docwrite": null, "template_replacement": 1, "execution_results": null, "tier": 1, "internal": 6, "content_type": "html", "timing": "onload", "method": "document", "type": "data provider", "id": 11313, "name": "Technographic Data provider tag"}, {"content": "", "target": null, "target_action": "append", "require": "", "docwrite": null, "template_replacement": 1, "execution_results": null, "tier": 1, "internal": 14, "content_type": "html", "freq_cap": 3, "timing": "onload", "method": "document", "id": 45111, "name": "Krux Geographic Data provider tag"}, {"content": "", "target": null, "target_action": "append", "require": "", "docwrite": null, "template_replacement": 1, "execution_results": null, "tier": 1, "internal": 16, "content_type": "html", "freq_cap": 3, "timing": "onload", "method": "document", "id": 62892, "name": "Gigya provider tag"}, {"content": "<script type=\"text/javascript\">Krux('social.init');</script>", "target": null, "target_action": "append", "require": "", "docwrite": null, "internal": 1, "template_replacement": 1, "execution_results": null, "tier": 1, "library_tag_config": {}, "content_type": "html", "timing": "onload", "method": "document", "type": "library", "id": 65004, "name": "Krux Track Social"}, {"content": "<script type=\"text/javascript\">\r\n(function() {\r\nfunction retrieve(n) {\r\n  var m, k = 'kx' + n;\r\n  if (window.localStorage) {\r\n    return window.localStorage[k] || \"\"; \r\n  } else if (navigator.cookieEnabled) {\r\n      m = document.cookie.match(k + '=([^;]*)');\r\n      return (m && unescape(m[1])) || \"\"; \r\n  } else {\r\n        return ''; \r\n  }\r\n}\r\n\r\nKrux.user = retrieve('user');\r\nKrux.segments = retrieve('segs') && retrieve('segs').split(',') || [];\r\nif (Krux.user != '') {\r\n  var af_url = '//track.adform.net/dmp/profile/?pid=9';\r\n  if (Krux.segments.length > 0) {\r\n    for(i=0;i<Krux.segments.length;i++){\r\n      af_url += '&cat=segment|';\r\n      af_url += Krux.segments[i];\r\n    }\r\n    new Image().src = af_url;\r\n  }\r\n}\r\n})(); \r\n\r\n</script>", "target": "", "target_action": null, "require": "", "docwrite": null, "template_replacement": 1, "execution_results": {"onloadSafe": true, "docwrite": false, "listeners": []}, "tier": 1, "internal": 1, "content_type": "html", "timing": "onload", "method": "document", "type": "publisher", "id": 30834, "name": "Adform Tag"}, {"content": "<script>\r\n// Using Meta keywords to produce page attribute keywords\r\nKrux('scrape', { \"page_attr_mobkeywords\": {meta_name: \"keywords\"}});\r\n</script>", "target": "", "target_action": null, "require": "", "docwrite": null, "template_replacement": 1, "execution_results": {"onloadSafe": true, "docwrite": false, "listeners": []}, "tier": 1, "internal": 1, "content_type": "html", "timing": "onload", "method": "document", "type": "publisher", "id": 28291, "name": "DTC for nu.nl test"}, {"content": "<script>\r\n  Krux('onOnce:user_data_response', function() {\r\n    get_query_parameters = function() {\r\n        var result = {};\r\n        var url = window.location.search;\r\n        if (url) {\r\n            // split up the query string and store in an associative array\r\n            var params = url.slice(1).split(\"&\");\r\n            for (var i = 0; i < params.length; i++) {\r\n                var tmp = params[i].split(\"=\");\r\n                result[unescape(tmp[0])] = unescape(tmp[1]);\r\n            }\r\n        }\r\n        return result;\r\n    }\r\n    \r\n    // Get all parameters  \r\n    var all_params= get_query_parameters();\r\n    if (all_params[\"kl\"] && all_params[\"ku\"]) {\r\n        var base_url = \"http://rc.bt.ilsemedia.nl/kuma\";\r\n        \r\n        var kuid = Krux('get', 'user');\r\n        if (kuid) {\r\n            var img = new Image(0,0);\r\n            img.src = base_url + \"/\" + all_params[\"kl\"] +\r\n\"/\" + all_params[\"ku\"] + \"/?kuid=\" + kuid;\r\n        }\r\n    }\r\n});\r\n</script>", "target": "", "target_action": null, "require": "", "docwrite": null, "template_replacement": 1, "execution_results": {"onloadSafe": true, "docwrite": false, "listeners": []}, "tier": 1, "internal": false, "content_type": "html", "timing": "onload", "method": "document", "type": "publisher", "id": 20144, "name": "Krux Messagant Pixel"}, {"content": "<script>\r\n(function() {\r\n  // Using UrlPath 1 to produce page attribute url_path_1\r\n  Krux('scrape', { 'page_attr_nu_url_path_1': {url_path: '1'}});\r\n})();\r\n</script>", "target": "", "target_action": null, "require": "", "docwrite": null, "template_replacement": 1, "execution_results": {"onloadSafe": true, "docwrite": false, "listeners": []}, "tier": 1, "internal": false, "content_type": "html", "timing": "onload", "method": "document", "type": "publisher", "id": 68286, "name": "nu DTC"}], "buckets": [], "publisher": {"uuid": "9ae1de1e-f2f8-4599-a15e-eb921b259f51", "id": 10044, "name": "Sanoma"}, "controltag_options": {"async": "false", "render": true}, "site": {"id": 10349, "name": "nu.nl"}, "realtime_segments": [{"test": ["and", ["or", ["and", ["or", ["intersects", "$page_attr_keywords:, ", "[\"formule 1\"]"], ["intersects", "$page_attr_keywords:, ", "[\"formule 1\", \"formule 3\"]"], ["intersects", "$page_attr_keywords:, ", "[\"red bull racing\"]"], ["intersects", "$page_attr_keywords:, ", "[\"motogp\", \"red bull racing\", \"gp van bahrein\", \"gp australi\ufffd\", \"gp australi\ufffdnieuws\", \"gp maleisi\ufffd\", \"gp bahrein\", \"gp australie\", \"gp china\"]"]]]]], "id": "qg4h1tuje"}, {"test": ["and", ["or", ["and", ["or", ["intersects", "$user_segments", "[\"p2pfouh5c\"]"]]]]], "id": "qk26empg5"}, {"test": ["and", ["or", ["and", ["or", ["intersects", "$user_segments", "[\"l7jyxevvg\"]"]]]]], "id": "qk3eego8j"}], "dnt": null, "params": {"connector_host": "connector.krxd.net", "first_party_uid": false, "control_tag_load_sync": "true", "userData_host": "cdn.krxd.net", "disable_http_compression": false, "remove_kxhead": true, "supertag_requires_approval": false, "control_tag_namespace": null, "cdn_host": "cdn.krxd.net", "control_tag_stats_prefix": null, "optimize_realtime_segments": false, "beacon_host": "beacon.krxd.net", "control_tag_pixel_throttle": null, "store_realtime_segments": false, "user_id_cookie": null, "max_segments": null, "no_pii": 0, "recommend": false, "revenue_optimization": false, "context_terms": "false", "jslog_host": "jslog.krxd.net", "buckets": "", "site_level_supertag_config": "site", "max_slot_time": 1000, "services_host": "apiservices.krxd.net", "capture_leakage": true, "client_side_storage": "localStorage,cookie", "fingerprint": false, "config_source": 1, "control_tag_version": "locked", "capture_js_errors": true, "datatag_version": "3", "dfp_premium": "true", "userdata_host": "cdn.krxd.net", "user_data_timing": "load", "target_fingerprint": false}, "services": {"event": "//beacon.krxd.net/event.gif", "impression": "//beacon.krxd.net/ad_impression.gif", "stats": "//apiservices.krxd.net/stats", "log": "//jslog.krxd.net/jslog.gif", "optout": "//beacon.krxd.net/optout_check", "config": "//cdn.krxd.net/controltag?confid=", "pixel": "//beacon.krxd.net/pixel.gif", "um": "//apiservices.krxd.net/um", "contentConnector": "//connector.krxd.net/content_connector/", "proxy": "//cdn.krxd.net/partnerjs/xdi", "set_optin": "//apiservices.krxd.net/consumer/optin", "social": "//beacon.krxd.net/social.gif", "set_optout": "//apiservices.krxd.net/consumer/optout", "addSegment": "//cdn.krxd.net/userdata/add", "userData": "//cdn.krxd.net/userdata/get", "data": "//beacon.krxd.net/data.gif", "userdata": "//cdn.krxd.net/userdata/get", "is_optout": "//beacon.krxd.net/optout_check"}, "geo": {}, "segments": [], "confid": "Hhv1fsXU"};

  // Wrap in a function and comment, then toString the func and replace
  // everything that's not the beginning or end of a JSON object, so we get a
  // string that's either empty or JSON.
  var esiGeo = String(function(){/*
    <esi:include src="/geoip_esi"/>
  */}).replace(/^.*\/\*[^{]+|[^}]+\*\/.*$/g, '');

  if (esiGeo) {
    log('Got a request for:', esiGeo, 'adding geo to config.');
    try {
      config.geo = window.JSON.parse(esiGeo);
    } catch (__) {
      // Couldn't parse, so setting to {}
      log('Unable to parse geo from:', config.geo);
      config.geo = {};
    }
  }

  
  
  

  load('//cdn.krxd.net/ctjs/controltag.js.e0ce6829d34e23edb3c90f3615dd81e0', function() {
    
    
    log('Loading krux configuration.');

    Krux('config', config);

    
  });
})();
